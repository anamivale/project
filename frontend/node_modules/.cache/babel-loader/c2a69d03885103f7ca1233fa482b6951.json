{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\frontend\\\\src\\\\Pages\\\\Student.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport GraphQLFetch from \"../Helpers/GraphQLFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Student(props) {\n  _s();\n\n  const [myInfo, setMyInfo] = useState({});\n  const [candidates, setCandidates] = useState([]);\n  useEffect(() => {\n    if (props.reg_no) {\n      fetchMyInfo();\n    }\n  }, []);\n\n  async function fetchMyInfo() {\n    let res = await GraphQLFetch(`{\n          myInfo(reg_no: \"${props.reg_no}\"){\n            name\n            reg_no\n            school{\n              name\n              code\n            }\n          }\n        }`);\n    setMyInfo(res.data.myInfo);\n  }\n\n  async function fetchCandidates() {\n    let {\n      data\n    } = await GraphQLFetch(`{\n      schoolCandidates(school: \"spass\"){\n        name\n        voteCount\n      }\n    }`);\n    setCandidates(data.schoolCandidates);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"student\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \"Student's Page \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-school\",\n      children: [myInfo.school.name, \" (\", myInfo.school.code.toUpperCase(), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-candidates\",\n      children: candidate.map(s => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"candidate\",\n        children: s.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Student, \"ufz2/z0bU0OMCBTpx56Nv59wQ9M=\");\n\n_c = Student;\nexport default Student;\n\nvar _c;\n\n$RefreshReg$(_c, \"Student\");","map":{"version":3,"sources":["E:/project/frontend/src/Pages/Student.jsx"],"names":["React","useState","useEffect","GraphQLFetch","Student","props","myInfo","setMyInfo","candidates","setCandidates","reg_no","fetchMyInfo","res","data","fetchCandidates","schoolCandidates","school","name","code","toUpperCase","candidate","map","s"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACtB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,KAAK,CAACK,MAAV,EAAkB;AAChBC,MAAAA,WAAW;AACZ;AACF,GAJQ,EAIN,EAJM,CAAT;;AAMA,iBAAeA,WAAf,GAA6B;AAC3B,QAAIC,GAAG,GAAG,MAAMT,YAAY,CAAE;AAClC,4BAA4BE,KAAK,CAACK,MAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UATgC,CAA5B;AAUAH,IAAAA,SAAS,CAACK,GAAG,CAACC,IAAJ,CAASP,MAAV,CAAT;AACD;;AAED,iBAAeQ,eAAf,GAAiC;AAC/B,QAAI;AAAED,MAAAA;AAAF,QAAW,MAAMV,YAAY,CAAE;AACvC;AACA;AACA;AACA;AACA,MALqC,CAAjC;AAMAM,IAAAA,aAAa,CAACI,IAAI,CAACE,gBAAN,CAAb;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACGT,MAAM,CAACU,MAAP,CAAcC,IADjB,QACyBX,MAAM,CAACU,MAAP,CAAcE,IAAd,CAAmBC,WAAnB,EADzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,gBACGC,SAAS,CAACC,GAAV,CAAeC,CAAD,iBACb;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBAA4BA,CAAC,CAACL;AAA9B;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GA9CQb,O;;KAAAA,O;AAgDT,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport GraphQLFetch from \"../Helpers/GraphQLFetch\"\r\n\r\nfunction Student(props) {\r\n  const [myInfo, setMyInfo] = useState({})\r\n  const [candidates, setCandidates] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (props.reg_no) {\r\n      fetchMyInfo()\r\n    }\r\n  }, [])\r\n\r\n  async function fetchMyInfo() {\r\n    let res = await GraphQLFetch(`{\r\n          myInfo(reg_no: \"${props.reg_no}\"){\r\n            name\r\n            reg_no\r\n            school{\r\n              name\r\n              code\r\n            }\r\n          }\r\n        }`)\r\n    setMyInfo(res.data.myInfo)\r\n  }\r\n\r\n  async function fetchCandidates() {\r\n    let { data } = await GraphQLFetch(`{\r\n      schoolCandidates(school: \"spass\"){\r\n        name\r\n        voteCount\r\n      }\r\n    }`)\r\n    setCandidates(data.schoolCandidates)\r\n  }\r\n  return (\r\n    <div className=\"student\">\r\n      <div className=\"title\">Student's Page </div>\r\n      <div className=\"my-school\">\r\n        {myInfo.school.name} ({myInfo.school.code.toUpperCase()})\r\n      </div>\r\n      <div className=\"my-candidates\">\r\n        {candidate.map((s) => (\r\n          <div className=\"candidate\">{s.name}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Student\r\n"]},"metadata":{},"sourceType":"module"}