{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\frontend\\\\src\\\\Pages\\\\Candidates.jsx\",\n    _s = $RefreshSig$();\n\nimport { faSave, faTimesCircle, faUserEdit, faUserPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useState } from \"react\";\nimport Modal from \"../Components/Modal\";\nimport GraphQLFetch from \"../Helpers/GraphQLFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Candidates() {\n  _s();\n\n  const [schools, setSchools] = useState([]);\n  const [addStudent, setAddStudent] = useState(false);\n  const [regno, setRegno] = useState(\"\");\n  useEffect(() => {\n    fetchSchools();\n  }, []);\n\n  async function fetchSchools() {\n    let res = await GraphQLFetch(`{\n      schools{\n        name\n        code\n      }\n    }`);\n    setSchools(res.data.schools);\n    setTimeout(() => {\n      console.log(schools);\n    }, 2000);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"students\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \"Candidates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), schools.map(s => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: s.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Add Candidate\",\n      shown: addStudent,\n      hideMe: () => setAddStudent(false),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: \"Registration Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setRegno(e.target.value),\n          style: {\n            width: 300\n          },\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button black\",\n          onClick: async () => {\n            let {\n              errors,\n              data\n            } = await GraphQLFetch(`mutation{\n                addCandidate(reg_no: \"${regno}\"){\n                  reg_no\n                  name\n                  school{\n                    name\n                    code\n                  }\n                }\n              }`);\n\n            if (errors) {\n              alert(\"Failed to add Candidate\\n\\n\" + errors.map(e => e.message));\n            } else {\n              alert(`Candidate Added`);\n              setAddStudent(false);\n            }\n\n            fetchCandidates();\n          },\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faSave\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), \"\\xA0 Save\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Candidates, \"ROA86a2kGlb7eQ7XN5hqXUJpgUo=\");\n\n_c = Candidates;\nexport default Candidates;\n\nvar _c;\n\n$RefreshReg$(_c, \"Candidates\");","map":{"version":3,"sources":["E:/project/frontend/src/Pages/Candidates.jsx"],"names":["faSave","faTimesCircle","faUserEdit","faUserPlus","FontAwesomeIcon","React","useEffect","useState","Modal","GraphQLFetch","Candidates","schools","setSchools","addStudent","setAddStudent","regno","setRegno","fetchSchools","res","data","setTimeout","console","log","map","s","name","e","target","value","width","errors","alert","message","fetchCandidates"],"mappings":"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","sourcesContent":["import {\r\n  faSave,\r\n  faTimesCircle,\r\n  faUserEdit,\r\n  faUserPlus,\r\n} from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport Modal from \"../Components/Modal\"\r\nimport GraphQLFetch from \"../Helpers/GraphQLFetch\"\r\n\r\nfunction Candidates() {\r\n  const [schools, setSchools] = useState([])\r\n  const [addStudent, setAddStudent] = useState(false)\r\n  const [regno, setRegno] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    fetchSchools()\r\n  }, [])\r\n\r\n  async function fetchSchools() {\r\n    let res = await GraphQLFetch(`{\r\n      schools{\r\n        name\r\n        code\r\n      }\r\n    }`)\r\n    setSchools(res.data.schools)\r\n    setTimeout(() => {\r\n      console.log(schools)\r\n    }, 2000)\r\n  }\r\n\r\n  return (\r\n    <div className=\"students\">\r\n      <div className=\"title\">Candidates</div>\r\n\r\n      {schools.map((s) => (\r\n        <p>{s.name}</p>\r\n      ))}\r\n\r\n      <Modal\r\n        title=\"Add Candidate\"\r\n        shown={addStudent}\r\n        hideMe={() => setAddStudent(false)}\r\n      >\r\n        <div className=\"input\">\r\n          <label htmlFor=\"\">Registration Number</label>\r\n          <input\r\n            onChange={(e) => setRegno(e.target.value)}\r\n            style={{ width: 300 }}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"options\">\r\n          <div\r\n            className=\"button black\"\r\n            onClick={async () => {\r\n              let { errors, data } = await GraphQLFetch(`mutation{\r\n                addCandidate(reg_no: \"${regno}\"){\r\n                  reg_no\r\n                  name\r\n                  school{\r\n                    name\r\n                    code\r\n                  }\r\n                }\r\n              }`)\r\n              if (errors) {\r\n                alert(\r\n                  \"Failed to add Candidate\\n\\n\" + errors.map((e) => e.message)\r\n                )\r\n              } else {\r\n                alert(`Candidate Added`)\r\n                setAddStudent(false)\r\n              }\r\n              fetchCandidates()\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faSave} />\r\n            &nbsp; Save\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Candidates\r\n"]},"metadata":{},"sourceType":"module"}