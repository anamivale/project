{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\frontend\\\\src\\\\Pages\\\\Candidates.jsx\",\n    _s = $RefreshSig$();\n\nimport { faSave, faSchool, faTimesCircle, faUserEdit, faUserPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useState } from \"react\";\nimport Modal from \"../Components/Modal\";\nimport GraphQLFetch from \"../Helpers/GraphQLFetch\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\n\nfunction Candidates() {\n  _s();\n\n  const [schools, setSchools] = useState([]);\n  const [addStudent, setAddStudent] = useState(false);\n  const [regno, setRegno] = useState(\"\");\n  const [candidates, setCandidates] = useState([]);\n  useEffect(() => {\n    fetchCandidates();\n  }, []);\n\n  async function fetchCandidates() {\n    let sch = await fetchSchools();\n\n    for (let s of sch) {\n      let candidates = await GraphQLFetch(`{\n        schoolCandidates(school: \"${s.code}\"){\n          name\n          reg_no\n          voteCount\n        }\n      }`); // console.log(candidates.data.schoolCandidates)\n\n      s.candidates = candidates.data.schoolCandidates;\n    }\n\n    setSchools(sch);\n  }\n\n  async function fetchSchools() {\n    let res = await GraphQLFetch(`{\n      schools{\n        name\n        code\n      }\n    }`);\n    return res.data.schools;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"students\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \"Candidates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button\",\n        onClick: e => setAddStudent(true),\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faUserPlus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), \"Add\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), schools.map(s => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"can-school\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"school-name\",\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faSchool,\n          style: {\n            marginRight: 5,\n            transform: \"translateY(-1px)\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), s.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), s.candidates.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"can-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"can-chart\",\n          children: /*#__PURE__*/_jsxDEV(Doughnut, {\n            data: {\n              labels: s.candidates.map(c => c.name),\n              datasets: [{\n                label: \"# of Votes\",\n                data: s.candidates.map(c => parseInt(c.voteCount)),\n                backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(255, 159, 64, 0.2)\"],\n                borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(75, 192, 192, 1)\", \"rgba(153, 102, 255, 1)\", \"rgba(255, 159, 64, 1)\"],\n                borderWidth: 1\n              }]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"can-list\",\n          children: s.candidates.map(c => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"candidate\",\n            children: [c.name, \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                children: [\"(\", c.voteCount.toLocaleString(), \" Votes)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: \"No Candidate Found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Add Candidate\",\n      shown: addStudent,\n      hideMe: () => setAddStudent(false),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: \"Registration Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setRegno(e.target.value),\n          style: {\n            width: 300\n          },\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button black\",\n          onClick: async () => {\n            let {\n              errors,\n              data\n            } = await GraphQLFetch(`mutation{\n                addCandidate(reg_no: \"${regno}\"){\n                  reg_no\n                  name\n                  school{\n                    name\n                    code\n                  }\n                }\n              }`);\n\n            if (errors) {\n              alert(\"Failed to add Candidate\\n\\n\" + errors.map(e => e.message));\n            } else {\n              alert(`Candidate Added`);\n              setAddStudent(false);\n            }\n\n            fetchCandidates();\n          },\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faSave\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), \"\\xA0 Save\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Candidates, \"zcVqtH5JuwrLQQIZgiyE7lmp85c=\");\n\n_c = Candidates;\nexport default Candidates;\n\nvar _c;\n\n$RefreshReg$(_c, \"Candidates\");","map":{"version":3,"sources":["E:/project/frontend/src/Pages/Candidates.jsx"],"names":["faSave","faSchool","faTimesCircle","faUserEdit","faUserPlus","FontAwesomeIcon","React","useEffect","useState","Modal","GraphQLFetch","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","register","Candidates","schools","setSchools","addStudent","setAddStudent","regno","setRegno","candidates","setCandidates","fetchCandidates","sch","fetchSchools","s","code","data","schoolCandidates","res","e","map","marginRight","transform","name","length","labels","c","datasets","label","parseInt","voteCount","backgroundColor","borderColor","borderWidth","toLocaleString","target","value","width","errors","alert","message"],"mappings":"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","sourcesContent":["import {\r\n  faSave,\r\n  faSchool,\r\n  faTimesCircle,\r\n  faUserEdit,\r\n  faUserPlus,\r\n} from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport Modal from \"../Components/Modal\"\r\nimport GraphQLFetch from \"../Helpers/GraphQLFetch\"\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\"\r\n\r\nimport { Doughnut } from \"react-chartjs-2\"\r\nChartJS.register(ArcElement, Tooltip, Legend)\r\n\r\nfunction Candidates() {\r\n  const [schools, setSchools] = useState([])\r\n  const [addStudent, setAddStudent] = useState(false)\r\n  const [regno, setRegno] = useState(\"\")\r\n  const [candidates, setCandidates] = useState([])\r\n\r\n  useEffect(() => {\r\n    fetchCandidates()\r\n  }, [])\r\n\r\n  async function fetchCandidates() {\r\n    let sch = await fetchSchools()\r\n\r\n    for (let s of sch) {\r\n      let candidates = await GraphQLFetch(`{\r\n        schoolCandidates(school: \"${s.code}\"){\r\n          name\r\n          reg_no\r\n          voteCount\r\n        }\r\n      }`)\r\n      // console.log(candidates.data.schoolCandidates)\r\n      s.candidates = candidates.data.schoolCandidates\r\n    }\r\n    setSchools(sch)\r\n  }\r\n\r\n  async function fetchSchools() {\r\n    let res = await GraphQLFetch(`{\r\n      schools{\r\n        name\r\n        code\r\n      }\r\n    }`)\r\n    return res.data.schools\r\n  }\r\n\r\n  return (\r\n    <div className=\"students\">\r\n      <div className=\"title\">Candidates</div>\r\n      <div className=\"options\">\r\n        <div className=\"button\" onClick={(e) => setAddStudent(true)}>\r\n          <FontAwesomeIcon icon={faUserPlus} />\r\n          Add\r\n        </div>\r\n      </div>\r\n      {schools.map((s) => (\r\n        <div className=\"can-school\">\r\n          <div className=\"school-name\">\r\n            <FontAwesomeIcon\r\n              icon={faSchool}\r\n              style={{ marginRight: 5, transform: \"translateY(-1px)\" }}\r\n            />\r\n            {s.name}\r\n          </div>\r\n          {s.candidates.length > 0 ? (\r\n            <div className=\"can-details\">\r\n              <div className=\"can-chart\">\r\n                <Doughnut\r\n                  data={{\r\n                    labels: s.candidates.map((c) => c.name),\r\n                    datasets: [\r\n                      {\r\n                        label: \"# of Votes\",\r\n                        data: s.candidates.map((c) => parseInt(c.voteCount)),\r\n                        backgroundColor: [\r\n                          \"rgba(255, 99, 132, 0.2)\",\r\n                          \"rgba(54, 162, 235, 0.2)\",\r\n                          \"rgba(255, 206, 86, 0.2)\",\r\n                          \"rgba(75, 192, 192, 0.2)\",\r\n                          \"rgba(153, 102, 255, 0.2)\",\r\n                          \"rgba(255, 159, 64, 0.2)\",\r\n                        ],\r\n                        borderColor: [\r\n                          \"rgba(255, 99, 132, 1)\",\r\n                          \"rgba(54, 162, 235, 1)\",\r\n                          \"rgba(255, 206, 86, 1)\",\r\n                          \"rgba(75, 192, 192, 1)\",\r\n                          \"rgba(153, 102, 255, 1)\",\r\n                          \"rgba(255, 159, 64, 1)\",\r\n                        ],\r\n                        borderWidth: 1,\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </div>\r\n              <ul className=\"can-list\">\r\n                {s.candidates.map((c) => (\r\n                  <li className=\"candidate\">\r\n                    {c.name}{\" \"}\r\n                    <b>\r\n                      <i>({c.voteCount.toLocaleString()} Votes)</i>\r\n                    </b>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          ) : (\r\n            <div className=\"message\">No Candidate Found!</div>\r\n          )}\r\n        </div>\r\n      ))}\r\n\r\n      <Modal\r\n        title=\"Add Candidate\"\r\n        shown={addStudent}\r\n        hideMe={() => setAddStudent(false)}\r\n      >\r\n        <div className=\"input\">\r\n          <label htmlFor=\"\">Registration Number</label>\r\n          <input\r\n            onChange={(e) => setRegno(e.target.value)}\r\n            style={{ width: 300 }}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"options\">\r\n          <div\r\n            className=\"button black\"\r\n            onClick={async () => {\r\n              let { errors, data } = await GraphQLFetch(`mutation{\r\n                addCandidate(reg_no: \"${regno}\"){\r\n                  reg_no\r\n                  name\r\n                  school{\r\n                    name\r\n                    code\r\n                  }\r\n                }\r\n              }`)\r\n              if (errors) {\r\n                alert(\r\n                  \"Failed to add Candidate\\n\\n\" + errors.map((e) => e.message)\r\n                )\r\n              } else {\r\n                alert(`Candidate Added`)\r\n                setAddStudent(false)\r\n              }\r\n              fetchCandidates()\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faSave} />\r\n            &nbsp; Save\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Candidates\r\n"]},"metadata":{},"sourceType":"module"}