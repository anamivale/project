{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\frontend\\\\src\\\\Admin.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport GraphQLFetch from \"./Helpers/GraphQLFetch\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGraduationCap, faSchool, faVoteYea } from \"@fortawesome/free-solid-svg-icons\";\nimport { NavLink } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Admin() {\n  _s();\n\n  const [candidates, setCandidates] = useState([]);\n  const [schools, setSchools] = useState([]);\n  const [students, setStudents] = useState([]);\n  const [winners, setWinners] = useState([]);\n  useEffect(() => {\n    // loadCandidates()\n    loadSchools();\n    loadStudents();\n    loadWinners();\n  }, []);\n\n  async function loadCandidates() {\n    let {\n      data,\n      errors\n    } = await GraphQLFetch(`{\n      candidates{\n        name\n        reg_no\n      }\n    }`);\n\n    if (data) {\n      setCandidates(data.candidates);\n    }\n  }\n\n  async function loadSchools() {\n    let {\n      data,\n      errors\n    } = await GraphQLFetch(`{\n      schools{\n        name\n        code\n      }\n    }`);\n\n    if (data) {\n      setSchools(data.schools);\n    }\n  }\n\n  async function loadWinners() {\n    let {\n      data,\n      errors\n    } = await GraphQLFetch(`{\n      winners{\n        name,\n        reg_no,\n        school{\n          name\n          code\n        }\n      }\n    }`);\n\n    if (data) {\n      setWinners(data.winners);\n    }\n  }\n\n  async function loadStudents() {\n    let {\n      data,\n      errors\n    } = await GraphQLFetch(`{\n      students{\n        name\n        reg_no\n      }\n    }`);\n\n    if (data) {\n      setStudents(data.students);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \"Admin's Interface\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-dash\",\n      children: [/*#__PURE__*/_jsxDEV(NavLink, {\n        exact: true,\n        to: \"/candidates\",\n        className: \"dash-item\",\n        title: candidates.map(c => c.name),\n        children: [\"Candidates\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"count\",\n          children: candidates.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"icon\",\n          size: \"3x\",\n          icon: faVoteYea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n        exact: true,\n        to: \"/students\",\n        className: \"dash-item\",\n        title: students.map(s => `${s.name} (${s.reg_no})`),\n        children: [\"Students\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"count\",\n          children: students.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"icon\",\n          size: \"3x\",\n          icon: faGraduationCap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n        exact: true,\n        to: \"/Schools\",\n        className: \"dash-item\",\n        title: schools.map(s => `${s.name} (${s.code})`),\n        children: [\"Schools\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"count\",\n          children: schools.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"icon\",\n          size: \"3x\",\n          icon: faSchool\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \"Provisional Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"prov-winners\",\n      children: winners.map(w => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"winner\",\n        children: [w.name, \" (\", w.reg_no, \") - \", w.school.name, \" (\", w.school.code, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Admin, \"E+3mqHknaAZgTw/X/HluaHyGp5s=\");\n\n_c = Admin;\nexport default Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["E:/project/frontend/src/Admin.jsx"],"names":["React","useState","useEffect","GraphQLFetch","FontAwesomeIcon","faGraduationCap","faSchool","faVoteYea","NavLink","Admin","candidates","setCandidates","schools","setSchools","students","setStudents","winners","setWinners","loadSchools","loadStudents","loadWinners","loadCandidates","data","errors","map","c","name","length","s","reg_no","code","w","school"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport GraphQLFetch from \"./Helpers/GraphQLFetch\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport {\r\n  faGraduationCap,\r\n  faSchool,\r\n  faVoteYea,\r\n} from \"@fortawesome/free-solid-svg-icons\"\r\nimport { NavLink } from \"react-router-dom\"\r\n\r\nfunction Admin() {\r\n  const [candidates, setCandidates] = useState([])\r\n  const [schools, setSchools] = useState([])\r\n  const [students, setStudents] = useState([])\r\n  const [winners, setWinners] = useState([])\r\n\r\n  useEffect(() => {\r\n    // loadCandidates()\r\n    loadSchools()\r\n    loadStudents()\r\n    loadWinners()\r\n  }, [])\r\n\r\n  async function loadCandidates() {\r\n    let { data, errors } = await GraphQLFetch(`{\r\n      candidates{\r\n        name\r\n        reg_no\r\n      }\r\n    }`)\r\n    if (data) {\r\n      setCandidates(data.candidates)\r\n    }\r\n  }\r\n\r\n  async function loadSchools() {\r\n    let { data, errors } = await GraphQLFetch(`{\r\n      schools{\r\n        name\r\n        code\r\n      }\r\n    }`)\r\n    if (data) {\r\n      setSchools(data.schools)\r\n    }\r\n  }\r\n\r\n  async function loadWinners() {\r\n    let { data, errors } = await GraphQLFetch(`{\r\n      winners{\r\n        name,\r\n        reg_no,\r\n        school{\r\n          name\r\n          code\r\n        }\r\n      }\r\n    }`)\r\n    if (data) {\r\n      setWinners(data.winners)\r\n    }\r\n  }\r\n\r\n  async function loadStudents() {\r\n    let { data, errors } = await GraphQLFetch(`{\r\n      students{\r\n        name\r\n        reg_no\r\n      }\r\n    }`)\r\n    if (data) {\r\n      setStudents(data.students)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"admin\">\r\n      <div className=\"title\">Admin's Interface</div>\r\n      <div className=\"top-dash\">\r\n        <NavLink\r\n          exact\r\n          to=\"/candidates\"\r\n          className=\"dash-item\"\r\n          title={candidates.map((c) => c.name)}\r\n        >\r\n          Candidates\r\n          <div className=\"count\">{candidates.length}</div>\r\n          <FontAwesomeIcon className=\"icon\" size=\"3x\" icon={faVoteYea} />\r\n        </NavLink>\r\n        <NavLink\r\n          exact\r\n          to=\"/students\"\r\n          className=\"dash-item\"\r\n          title={students.map((s) => `${s.name} (${s.reg_no})`)}\r\n        >\r\n          Students\r\n          <div className=\"count\">{students.length}</div>\r\n          <FontAwesomeIcon className=\"icon\" size=\"3x\" icon={faGraduationCap} />\r\n        </NavLink>\r\n        <NavLink\r\n          exact\r\n          to=\"/Schools\"\r\n          className=\"dash-item\"\r\n          title={schools.map((s) => `${s.name} (${s.code})`)}\r\n        >\r\n          Schools\r\n          <div className=\"count\">{schools.length}</div>\r\n          <FontAwesomeIcon className=\"icon\" size=\"3x\" icon={faSchool} />\r\n        </NavLink>\r\n      </div>\r\n      <div className=\"title\">Provisional Winners</div>\r\n      <ul className=\"prov-winners\">\r\n        {winners.map((w) => (\r\n          <li className=\"winner\">\r\n            {w.name} ({w.reg_no}) - {w.school.name} ({w.school.code})\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Admin\r\n"]},"metadata":{},"sourceType":"module"}